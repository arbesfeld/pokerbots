package pokerbots.player;

public class Brain {
	//instantiated every hand
	public int handId, myBank, oppBank;
	public boolean button;
	public Card[] hand;
	
	//instantiated every action
	public int potSize, numBoardCards, numLastActions, numLegalActions;
	public Card[] board;
	public PerformedAction[] lastActions;
	public LegalAction[] legalActions;
	
	public PerformedAction lastAction;
	public LegalAction raiseAction;
	
	public double timebank;
	
	private double equity;
	
	private Historian maj;
	private Dory dory;
	
	private EquityCalculator ec;
	
	Brain(Historian maj) {
		this.maj = maj;
		
		lastAction = lastActions[lastActions.length - 1];
		
		for(LegalAction legalAction : legalActions)
			if(legalAction.getType().equals("RAISE"))
				raiseAction = legalAction;
		
		
		dory = new Dory(this, maj);
		
	}
	
	Action act() {
		ec.setBoard(board);
		equity = ec.calculateTotalEquity();
		
		maj.update(this);
		dory.update();
		
		if(board[2] == null) 
			return actPreFlop();
		
		else if(board[3] == null)  {
			ec.setHand(hand); //just discarded a card
			return actPostFlop();
		}
		
		else if(board[4] == null) 
			return actPostTurn();
		
		else
			return actPostRiver();
	}
	
	Action actPreFlop() {
		return button ? actPreFlopButton() : actPreFlopNoButton();
	}
	
	Action actPreFlopButton() { //small blind acts first
		if(equity < 0.5) {
			if(dory.hasOpponentRaised()) { // opponent raised
				if(equity < 0.45 || 
						dory.lastOpponentRaiseSize() > 20) // an amount more than 20
					return fold();
				else // an amount less than 20
					return call(); 
			}
			else {
				return call();
			}
		}
		else if(equity < 0.6) { 
			if(dory.hasOpponentRaised())
				return fold();
			else
				return raise(HelperUtils.linInterp(equity, 0.55, 0.6, 25, 50));
		}
		
	}
	
	Action actPreFlopNoButton() { //big blind acts second
		
	}
	////////////////////////////////////////////////////
	Action actPostFlop() {
	}
	
	
	////////////////////////////////////////////////////
	Action actPostTurn() {
		
	}
	
	////////////////////////////////////////////////////
	Action actPostRiver() {
		
	}
	
	////////////////////////////////////////////////////
	public Action bet(int amount) {
		return ActionUtils.bet(amount);
	}
	
	public Action call() {
		return ActionUtils.call();
	}
	
	public Action check() {
		return ActionUtils.check();
	}
	
	public Action fold() {
		return ActionUtils.fold();
	}
	
	public Action raise(int amount) {
		return ActionUtils.raise(amount);
	}
	
	public Action allin() {
		return raise(raiseAction.getMax());
	}
	
	public Action minRaise() {
		return raise(raiseAction.getMin());
	}
	
}
