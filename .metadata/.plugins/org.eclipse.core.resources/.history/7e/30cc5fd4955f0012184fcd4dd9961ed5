package pokerbots.player;

public class Brain {
	//instantiated every hand
	public int handId, myBank, oppBank;
	public boolean button;
	public Card[] hand;
	
	//instantiated every action
	public int potSize, numBoardCards, numLastActions, numLegalActions;
	public Card[] board;
	public PerformedAction[] lastActions;
	public LegalAction[] legalActions;
	
	public static PerformedAction lastAction;
	public static LegalAction raiseAction;
	
	public double timebank;
	
	private double equity;
	
	private Historian maj;
	private Dory dory;
	
	private EquityCalculator ec;
	
	Brain(Historian maj) {
		this.maj = maj;
		
		lastAction = lastActions[lastActions.length - 1];
		
		for(LegalAction legalAction : legalActions)
			if(legalAction.getType().equals("RAISE"))
				raiseAction = legalAction;
		
		
		dory = new Dory();
		ec = new EquityCalculator(hand, null);
	}
	
	Action act() {
		ec.setBoard(board);
		equity = ec.calculateTotalEquity();
		maj.update(this);
		dory.update(this);
		
		if(board[2] == null) 
			return actPreFlop();
		
		else if(board[3] == null) 
			return actPostFlop();
		
		else if(board[4] == null) 
			return actPostTurn();
		
		else
			return actPostRiver();
	}
	
	Action actPreFlop() {
		return button ? actPreFlopButton() : actPreFlopNoButton();
	}
	
	Action actPreFlopButton() { //small blind acts first
		if(equity < 0.5) {
			if(dory.raiseNumThisStreet > 0)
				fold();
			
		}
	}
	
	Action actPreFlopNoButton() { //big blind acts second
		
	}
	////////////////////////////////////////////////////
	Action actPostFlop() {
	}
	
	
	////////////////////////////////////////////////////
	Action actPostTurn() {
		
	}
	
	////////////////////////////////////////////////////
	Action actPostRiver() {
		
	}
	
	////////////////////////////////////////////////////
	public static Action bet(int amount) {
		return ActionUtils.bet(amount);
	}
	
	public static Action call() {
		return ActionUtils.call();
	}
	
	public static Action check() {
		return ActionUtils.check();
	}
	
	public static Action fold() {
		return ActionUtils.fold();
	}
	
	public static Action raise(int amount) {
		return ActionUtils.raise(amount);
	}
	
	public static PerformedAction allin() {
		return raise(raiseAction.getMax());
	}
}
